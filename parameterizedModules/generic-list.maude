fmod GENERIC-LIST {X :: TRIV } is
    sort GenericList{X} .
    subsort X$Elt < GenericList{X} .

    op empty : -> GenericList{X} [ctor] .
    op __ : GenericList{X} GenericList{X} -> GenericList{X} [ctor assoc id: empty].

    var E : X$Elt .
    var L : GenericList{X} .

    op head : GenericList{X} -> X$Elt .
    eq head(E L) = E .
endfm

fmod NATLIST is
    pr GENERIC-LIST{Nat} .

    op test : -> GenericList{Nat} .
    eq test = 1 2 3 4 .
endfm

red test .
red head(test) .


fmod STRINGLIST is
    pr GENERIC-LIST{String} .
    op test : -> GenericList{String} .
    eq test = "hola" "que" "tal" .
endfm

red test .
red head(test) .

fmod TYPE is
    sort Type .
    ops type1 type2 type3 : -> Type [ctor] .
endfm

view Type from TRIV to TYPE is
    sort Elt to Type .
endv

fmod TYPELIST is
    pr GENERIC-LIST{Type} .

    op test : -> GenericList{Type} .
    eq test = type1 type2 type3 .
endfm

red test .
red head(test) .

q