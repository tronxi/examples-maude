load file

fmod COMMAND-SIGN is
    sorts @Token@ @Input@ Bubble NeTokenList .
    subsort @Token@ < @Input@ .
    op __ : @Input@ @Input@ -> @Input@ [ctor assoc] .
endfm

fmod GRAMMAR is
    pr QID .
    pr NAT .
    pr CONVERSION .

    sort Exp .

    op ___ : Qid Qid Qid -> Exp [ctor] .

    vars Q Q' : Qid .

    op qidToNat : Qid -> Nat .
    eq qidToNat(Q) = rat(string(Q), 10) .

    op calculate : Exp ~> Nat .
    eq calculate(Q '+ Q') = qidToNat(Q) + qidToNat(Q') .
    eq calculate(Q '- Q') = qidToNat(Q) - qidToNat(Q') .
    eq calculate(Q '* Q') = qidToNat(Q) * qidToNat(Q') .
    eq calculate(Q '/ Q') = qidToNat(Q) / qidToNat(Q') .
endfm

fmod TOKEN is
    inc QID-LIST .
    pr COMMAND-SIGN .
    op token : Qid -> @Token@ 
    [special (id-hook Bubble   (1 1) 
           op-hook qidSymbol (<Qids> : ~> Qid))] .
endfm

fmod CONVERTER is
    pr META-LEVEL .
    pr CONVERSION .

    op Nat : -> [Nat] .
    op Qid : -> [Qid] .

    var TL : TermList .
    var T : Term .

    op extractTerms : Term -> TermList .
    eq extractTerms('__[TL]) = extractTerms*(TL) .
    eq extractTerms(T) = T [owise] .

    op extractTerms* : TermList -> TermList .
    eq extractTerms*(empty) = empty .
    eq extractTerms*((T, TL)) = extractTerms(T), extractTerms*(TL) .

    op cleanTokens : TermList -> TermList .
    eq cleanTokens(empty) = empty .
    eq cleanTokens((T , TL)) = cleanToken(T) , cleanTokens(TL) .

    op cleanToken : Term -> Term .
    eq cleanToken('token[T]) = T .
endfm

fmod META-GRAMMAR is
    pr CONVERTER .

    var TL : TermList .
    var T : Term .
    var QL : QidList .

    op tokenGrammar : -> Module .
    eq tokenGrammar = upModule('TOKEN , false) .

    op grammar : -> Module .
    eq grammar = upModule('GRAMMAR, false) .

    op generateMetaExp : QidList -> ResultPair .
    eq generateMetaExp(QL) = metaReduce(grammar, '___[cleanTokens(extractTerms(getTerm(metaParse(tokenGrammar, QL, '@Input@))))]) .

    op calculate : Term -> String .
    eq calculate(T) = string(downTerm(getTerm(metaReduce(grammar, 'calculate[T])), Nat), 10) .
endfm

mod CALCULATOR is
    inc STD-STREAM .
    pr COMMAND-SIGN .
    pr META-GRAMMAR .
    pr LEXICAL .

    sorts Command State Calculator .

    subsorts Calculator < Attribute .

    op Calculator : -> Cid . 
    op calculator : -> Oid . 

    ops initial waiting parsing executing quit : -> State [ctor] .

    op calculate:_ : Term -> Command [ctor] .
    ops nothing invalid : -> Command [ctor] .
    op exit : -> Command [ctor] .

    op _,_ : State Command -> Calculator [ctor] .

    var O : Oid .
    var Str : String .
    var T : Term .

    rl [initial] :
    < calculator : Calculator | initial , nothing >
    =>
    < calculator : Calculator | waiting , nothing > 
    write(stdout, calculator, "\n\t Calculator\n") .

    rl [waiting] :
    < calculator : Calculator | waiting , nothing >
    => 
    < calculator : Calculator | parsing , nothing > 
    getLine(stdin, calculator, "> ") . 

    rl [parsing] :
    < calculator : Calculator | parsing, nothing > 
    gotLine(calculator, O, Str) 
    =>
    if Str == "quit\n" or Str == "q\n"
    then  
        < calculator : Calculator | executing , exit >
    else 
        if generateMetaExp(tokenize(Str)) :: ResultPair
        then
            < calculator : Calculator | executing , calculate: getTerm(generateMetaExp(tokenize(Str))) >
        else
            < calculator : Calculator | executing , invalid >
        fi
    fi .

    rl [executingInvalid] :
    < calculator : Calculator | executing , invalid >
    => 
    < calculator : Calculator | waiting, nothing > 
    write(stdout, calculator, "Invalid input \n") . 

    rl [executingValid] :
    < calculator : Calculator | executing , calculate: T >
    => 
    < calculator : Calculator | waiting, nothing > 
    write(stdout, calculator, "Result: " + calculate(T) + "\n") . 

    rl [executingQuit] :
    < calculator : Calculator | executing , exit >
    => 
    < calculator : Calculator | quit, exit > 
    write(stdout, calculator, "Bye\n") . 
endm

erew < calculator : Calculator | initial , nothing > write(stdout, calculator, "\n") .
q