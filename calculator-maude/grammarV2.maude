load file

set include BOOL off .

fmod COMMAND-SIGN is
    sorts @Token@ @Operation@ @Command@ @Input@ .
    subsort @Token@ < @Operation@ .
    subsort @Command@ < @Input@ .
    op _+_ : @Operation@ @Operation@ -> @Operation@ [ctor assoc prec 40] .
    op _-_ : @Operation@ @Operation@ -> @Operation@ [ctor prec 39] .
    op _*_ : @Operation@ @Operation@ -> @Operation@ [ctor assoc prec 38] .
    op _/_ : @Operation@ @Operation@ -> @Operation@ [ctor prec 37] .

    op calculate:_ : @Operation@ -> @Command@ [ctor] .
    op exit : -> @Command@ [ctor] .
endfm

fmod TOKEN is
    inc QID-LIST .
    pr COMMAND-SIGN .
    op token : Qid -> @Token@
    [special (id-hook Bubble   (1 1)
           op-hook qidSymbol (<Qids> : ~> Qid))] .
endfm

set include BOOL on .

fmod META-GRAMMAR is
    pr META-LEVEL .

    var TL : TermList .
    var T : Term .
    var QL : QidList .

    op grammar : -> Module .
    eq grammar = upModule('TOKEN, false) .
endfm

mod CALCULATOR is
    inc STD-STREAM .
    pr COMMAND-SIGN .
    pr META-GRAMMAR .
    pr LEXICAL .
    pr CONVERSION .

    sorts State .

    op Calculator : -> Cid .
    op calculator : -> Oid .

    ops initial waiting parsing executing quit : -> State [ctor] .

    op Qid : -> [Qid] [ctor] .
    op input:_ : TermList -> Attribute [ctor] .
    op state:_ : State -> Attribute [ctor] .

    var RP? : [ResultPair] .
    var AtS : AttributeSet .
    vars Str Result : String .
    vars T T' : Term .
    vars Q Q' : Qid .
    vars O O' : @Operation@ .

   op evaluate : Term -> Nat .
   eq evaluate('_+_['token[Q],'token[Q']]) = qidToNat(Q) + qidToNat(Q') .
   eq evaluate('_-_['token[Q],'token[Q']]) = sd(qidToNat(Q), qidToNat(Q')) .
   eq evaluate('_*_['token[Q],'token[Q']]) = qidToNat(Q) * qidToNat(Q') .
   eq evaluate('_/_['token[Q],'token[Q']]) = qidToNat(Q) / qidToNat(Q') .

   eq evaluate('token[Q]) = qidToNat(Q) .
   eq evaluate('_+_[T, T']) = evaluate(T) + evaluate(T') .
   eq evaluate('_-_[T, T']) = sd(evaluate(T), evaluate(T')) .
   eq evaluate('_*_[T, T']) = evaluate(T) * evaluate(T') .
   eq evaluate('_/_[T, T']) = evaluate(T) / evaluate(T') .


    op qidToNat : Term -> Nat .
    eq qidToNat(T) = rat(string(downTerm(T, Qid)), 10) .

    rl [initial] : < calculator : Calculator | state: initial, AtS >
    =>             < calculator : Calculator | state: waiting, AtS >
                   write(stdout, calculator, "\n\t Calculator\n") [print "1"] .

    rl [waiting] : wrote(calculator, stdout)
                   < calculator : Calculator | state: waiting, AtS >
    =>             < calculator : Calculator | state: parsing, AtS >
                   getLine(stdin, calculator, "> ") [print "2"] .

    crl [parsing] : gotLine(calculator, stdin, Str)
                    < calculator : Calculator | state: parsing, input: empty, AtS >
     =>             < calculator : Calculator | state: executing, input: T, AtS >
     if T := getTerm(metaParse(grammar, tokenize(Str), '@Operation@)) [print "3"] .

     crl [executing] : < calculator : Calculator | state: executing, input: T, AtS >
     => < calculator : Calculator | state: waiting, input: empty, AtS >  
        write(stdout, calculator, "Result: " + Result + "\n")
     if Result := string(evaluate(T), 10) .
endm

--- set print attribute on .
--- red metaParse(grammar, tokenize("2 + 2"), '@Operation@) .
erew <> < calculator : Calculator | state: initial, input: empty > .

q